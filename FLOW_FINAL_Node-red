[
    {
        "id": "a8e47745.abf53",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": ""
    },
    {
        "id": "48873970.f17d88",
        "type": "mqtt in",
        "z": "a8e47745.abf53",
        "name": "Sub_id_code_gen",  // MQTT input for receiving ID code generation messages
        "topic": "polimi/challenge_2/2023/id_code_generator/14",  // Topic to subscribe to
        "qos": "2",  // Quality of Service level
        "broker": "1f877238.d4df76",  // Reference to the MQTT broker
        "x": 160,
        "y": 500,
        "wires": [
            [
                "764b722e.bdb284"  // Output to the function node to filter null messages
            ]
        ]
    },
    {
        "id": "1303d5c6.7649ca",
        "type": "file in",
        "z": "a8e47745.abf53",
        "name": "Challenge2023_CSV",  // File input to read CSV data
        "filename": "/home/user/Desktop/Challenges file/challenge2023_2.csv",  // Path to the CSV file
        "format": "utf8",  // File encoding
        "chunk": false,
        "sendError": false,
        "x": 140,
        "y": 40,
        "wires": [
            [
                "bd0ad05e.5bad38"  // Output to CSV parsing node
            ]
        ]
    },
    {
        "id": "bd0ad05e.5bad38",
        "type": "csv",
        "z": "a8e47745.abf53",
        "name": "",  // Name for the CSV parsing node
        "sep": ",",  // Separator used in the CSV file
        "hdrin": "",  // Input header configuration
        "hdrout": "",  // Output header configuration
        "multi": "one",  // Handling multiple rows
        "ret": "\\n",  // Newline character for row separation
        "temp": "",  // Temporary variable configuration
        "skip": "0",  // Number of lines to skip
        "x": 190,
        "y": 100,
        "wires": [
            [
                "f58cb6fd.c5eb7"  // Output to the switch node for filtering
            ]
        ]
    },
    {
        "id": "93349f5e.3752b8",
        "type": "debug",
        "z": "a8e47745.abf53",
        "name": "",  // Debug node for monitoring output
        "active": true,
        "tosidebar": true,  // Show output in the sidebar
        "console": false,
        "tostatus": false,
        "complete": "payload",  // Show complete message payload
        "x": 1260,
        "y": 500,
        "wires": []
    },
    {
        "id": "b7ea1350.4f1358",
        "type": "function",
        "z": "a8e47745.abf53",
        "name": "Finding n ",  // Function to process ID and generate a new ID
        "func": "if(msg.payload.id){\nmsg.payload = (msg.payload.id + 7878)% 7711;\nglobal.set(\"id_gen\", msg.payload);\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 890,
        "y": 500,
        "wires": [
            [
                "75e524a7.6519ec"  // Output to the switch node for further processing
            ]
        ]
    },
    {
        "id": "1ebf56b.96c7329",
        "type": "json",
        "z": "a8e47745.abf53",
        "name": "json1",  // Node for converting payload to JSON
        "property": "payload",  // Property to be converted
        "action": "",
        "pretty": false,
        "x": 710,
        "y": 500,
        "wires": [
            [
                "b7ea1350.4f1358"  // Output to the function node to find ID
            ]
        ]
    },
    {
        "id": "764b722e.bdb284",
        "type": "function",
        "z": "a8e47745.abf53",
        "name": "Exclude Null messages",  // Function to exclude null messages
        "func": "if(msg.payload !== \"\"){\n    if(JSON.parse(msg.payload)){\n    p = JSON.parse(msg.payload);\n    if(p.id){\n    return msg;\n}\n}\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 440,
        "wires": [
            [
                "ca89cbd7.fb7cc"  // Output to the switch node for further processing
            ]
        ]
    },
    {
        "id": "f58cb6fd.c5eb7",
        "type": "switch",
        "z": "a8e47745.abf53",
        "name": "",  // Switch node to route messages based on condition
        "property": "payload.col1",  // Property to evaluate for switching
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "id_gen",  // Check if value equals global id_gen
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 340,
        "y": 100,
        "wires": [
            [
                "57dba9eb.f719d8",  // Output to function node for processing with multiple payloads
                "8b53d13d.62017",  // Output to function node for processing with one payload
                "6e946d43.668344"  // Output to function node for processing without payload
            ]
        ]
    },
    {
        "id": "57dba9eb.f719d8",
        "type": "function",
        "z": "a8e47745.abf53",
        "name": "Pub_Message with more than one payload",  // Function to handle messages with multiple payloads
        "func": "\nif(msg.payload.col9.includes(\"Publish Message\")){\n    if((msg.payload.col10) && (msg.payload.col10.includes(\"},{\"))){\n    msg.payload = msg.payload.col10.replace(/},/g,'}@');\n    return msg;\n    }  \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 100,
        "wires": [
            [
                "94c251d4.9ec828"  // Output to split node for further processing
            ]
        ]
    },
    {
        "id": "94c251d4.9ec828",
        "type": "split",
        "z": "a8e47745.abf53",
        "name": "",  // Split node to handle multiple payloads
        "splt": "@",  // Split delimiter
        "spltType": "str",
        "arraySplt": "1",
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 910,
        "y": 100,
        "wires": [
            [
                "65ef3ae9.b400dc"  // Output to function node for creating JSON strings
            ]
        ]
    },
    {
        "id": "6e946d43.668344",
        "type": "function",
        "z": "a8e47745.abf53",
        "name": "Pub_Message without payload",  // Function to handle messages without payload
        "func": "if(msg.payload.col9.includes(\"Publish Message\"))\n{\n    if(!(msg.payload.col10)){\n    msg.payload = \"\";\n    return msg;\n}\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 220,
        "wires": [
            [
                "65ef3ae9.b400dc"  // Output to function node for creating JSON strings
            ]
        ]
    },
    {
        "id": "9d1ffff8.e4c988",
        "type": "mqtt out",
        "z": "a8e47745.abf53",
        "name": "mqtt-pub_PERSON_CODE",  // MQTT output for publishing person code
        "topic": "/polimi/iot2023/challenge2/1083785",  // Topic for publishing messages
        "qos": "2",  // Quality of Service level
        "retain": false,
        "broker": "1f877238.d4df76",  // Reference to the MQTT broker
        "x": 1260,
        "y": 100,
        "wires": []
    },
    {
        "id": "65ef3ae9.b400dc",
        "type": "function",
        "z": "a8e47745.abf53",
        "name": "Creating JSON string",  // Function to create JSON strings for payloads
        "func": "msg.payload = JSON.stringify({\n    \"Person\": {\n        \"id\": global.get(\"id_gen\"),  // Use global ID generated\n        \"message\": msg.payload\n    }\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1140,
        "y": 100,
        "wires": [
            [
                "9d1ffff8.e4c988"  // Output to MQTT publish node
            ]
        ]
    },
    {
        "id": "8b53d13d.62017",
        "type": "function",
        "z": "a8e47745.abf53",
        "name": "Pub_Message with one payload",  // Function to handle messages with one payload
        "func": "if(msg.payload.col9.includes(\"Publish Message\")){\n    if(msg.payload.col10){\n    msg.payload = msg.payload.col10;\n    return msg;\n}\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 160,
        "wires": [
            [
                "65ef3ae9.b400dc"  // Output to function node for creating JSON strings
            ]
        ]
    },
    {
        "id": "9994a617.f4579",
        "type": "function",
        "z": "a8e47745.abf53",
        "name": "Counter",  // Function to manage the message counter
        "func": "if(global.get(\"counter\")== undefined){\n    global.set(\"counter\",1);\n    return msg;\n} else {\n    msg.payload = global.get(\"counter\");\n    global.set(\"counter\", global.get(\"counter\") + 1);\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 340,
        "wires": [
            [
                "f58cb6fd.c5eb7"  // Output to the switch node for processing
            ]
        ]
    },
    {
        "id": "c37615c1.00e7c",
        "type": "function",
        "z": "a8e47745.abf53",
        "name": "Stop and reset Counter",  // Function to stop and reset the counter based on incoming messages
        "func": "if(msg.payload === \"STOP\"){\n    global.set(\"counter\", undefined);\n    return null;\n}\nif(msg.payload === \"RESET\"){\n    global.set(\"counter\",1);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 280,
        "wires": [
            [
                "9994a617.f4579"  // Output to counter management function
            ]
        ]
    },
    {
        "id": "e8d9f3b4.2bfc28",
        "type": "mqtt in",
        "z": "a8e47745.abf53",
        "name": "Sub_counter_management",  // MQTT input for counter management commands
        "topic": "polimi/challenge_2/2023/counter_management",  // Topic to subscribe for commands
        "qos": "2",  // Quality of Service level
        "broker": "1f877238.d4df76",  // Reference to the MQTT broker
        "x": 160,
        "y": 340,
        "wires": [
            [
                "c37615c1.00e7c"  // Output to the function node for counter management
            ]
        ]
    },
    {
        "id": "1f877238.d4df76",
        "type": "mqtt-broker",
        "z": "",
        "name": "IoT_Broker",  // Configuration for the MQTT broker
        "broker": "broker.hivemq.com",  // Broker URL
        "port": "1883",  // Broker port
        "clientid": "node-red",  // Client ID for Node-RED connection
        "usetls": false,  // Use TLS for connection
        "keepalive": "60",  // Keep-alive interval
        "cleansession": true,  // Clean session flag
        "birthTopic": "",  // Optional birth topic
        "birthQos": "0",  // QoS for birth message
        "birthPayload": "",  // Payload for birth message
        "closeTopic": "",  // Optional close topic
        "closeQos": "0",  // QoS for close message
        "closePayload": "",  // Payload for close message
        "willTopic": "",  // Optional last will topic
        "willQos": "0",  // QoS for last will message
        "willPayload": ""  // Payload for last will message
    }
]
